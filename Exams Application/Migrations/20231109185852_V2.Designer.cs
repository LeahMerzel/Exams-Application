// <auto-generated />
using System;
using Exams_Application.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exams_Application.Migrations
{
    [DbContext(typeof(ExamsDbContext))]
    [Migration("20231109185852_V2")]
    partial class V2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Exams_Application.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerDetailed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionNumber1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionNumber1");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Exams_Application.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime>("ExamBegganAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamDuration")
                        .HasColumnType("int");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrderQuestionsRandom")
                        .HasColumnType("bit");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId1")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId1")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId2")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentId1");

                    b.HasIndex("TeacherId1");

                    b.HasIndex("TeacherId2");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Exams_Application.Models.Question", b =>
                {
                    b.Property<int>("QuestionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionNumber"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrderAnswersRandom")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionScoring")
                        .HasColumnType("int");

                    b.HasKey("QuestionNumber");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Exams_Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Exams_Application.Models.Student", b =>
                {
                    b.HasBaseType("Exams_Application.Models.User");

                    b.Property<float>("GradeAvg")
                        .HasColumnType("real");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Exams_Application.Models.Teacher", b =>
                {
                    b.HasBaseType("Exams_Application.Models.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Exams_Application.Models.Answer", b =>
                {
                    b.HasOne("Exams_Application.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionNumber1");
                });

            modelBuilder.Entity("Exams_Application.Models.Exam", b =>
                {
                    b.HasOne("Exams_Application.Models.Student", null)
                        .WithMany("AllExamsTaken")
                        .HasForeignKey("StudentId");

                    b.HasOne("Exams_Application.Models.Student", null)
                        .WithMany("ExamsToDo")
                        .HasForeignKey("StudentId1");

                    b.HasOne("Exams_Application.Models.Teacher", null)
                        .WithMany("AllTeachersExams")
                        .HasForeignKey("TeacherId1");

                    b.HasOne("Exams_Application.Models.Teacher", null)
                        .WithMany("SubmitedExams")
                        .HasForeignKey("TeacherId2");
                });

            modelBuilder.Entity("Exams_Application.Models.Question", b =>
                {
                    b.HasOne("Exams_Application.Models.Exam", null)
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Exams_Application.Models.Student", b =>
                {
                    b.HasOne("Exams_Application.Models.Teacher", null)
                        .WithMany("TeachersStudents")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Exams_Application.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Exams_Application.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Exams_Application.Models.Student", b =>
                {
                    b.Navigation("AllExamsTaken");

                    b.Navigation("ExamsToDo");
                });

            modelBuilder.Entity("Exams_Application.Models.Teacher", b =>
                {
                    b.Navigation("AllTeachersExams");

                    b.Navigation("SubmitedExams");

                    b.Navigation("TeachersStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
